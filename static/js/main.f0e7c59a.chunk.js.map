{"version":3,"sources":["components/Carousel/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","currentPosition","scrollLeft","props","images","step","frameSize","itemWidth","infinite","stepWidth","maxShift","length","setState","scrollRight","expectedShift","this","animationDuration","listWidth","className","style","width","map","image","src","alt","replace","transform","transition","type","disabled","onClick","React","Component","App","onChange","e","currentTarget","id","value","htmlFor","min","max","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0e7c59a.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\ninterface State {\n  currentPosition: number;\n}\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    currentPosition: 0,\n  };\n\n  scrollLeft = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const { currentPosition } = this.state;\n\n    const stepWidth = itemWidth * step;\n    const maxShift = (images.length - frameSize) * itemWidth * -1;\n    const expectedShift = currentPosition + stepWidth;\n\n    if (expectedShift > 0) {\n      this.setState({ currentPosition: 0 });\n    } else {\n      this.setState((state) => ({\n        currentPosition: state.currentPosition + stepWidth,\n      }));\n    }\n\n    if (infinite) {\n      if (currentPosition === 0) {\n        this.setState({ currentPosition: maxShift });\n      }\n    }\n  };\n\n  scrollRight = () => {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      infinite,\n    } = this.props;\n\n    const { currentPosition } = this.state;\n\n    const stepWidth = step * itemWidth;\n    const maxShift = (images.length - frameSize) * itemWidth * -1;\n    const expectedShift = currentPosition - stepWidth;\n\n    if (expectedShift < maxShift) {\n      this.setState({ currentPosition: maxShift });\n    } else {\n      this.setState({ currentPosition: expectedShift });\n    }\n\n    if (infinite) {\n      if (currentPosition === maxShift) {\n        this.setState({ currentPosition: 0 });\n      }\n    }\n  };\n\n  render(): React.ReactNode {\n    const {\n      images,\n      frameSize,\n      itemWidth,\n      infinite,\n      animationDuration,\n    } = this.props;\n\n    const { currentPosition } = this.state;\n\n    const maxShift = (images.length - frameSize) * itemWidth * -1;\n    const listWidth = frameSize * itemWidth;\n\n    return (\n      <div className=\"Carousel\">\n        <ul className=\"Carousel__list\" style={{ width: listWidth }}>\n          {images.map(image => {\n            return (\n              <li\n                className=\"Carousel__image\"\n                key={image}\n              >\n                <img\n                  src={image}\n                  alt={`${image.replace(/\\D/g, '')}`}\n                  style={{\n                    width: itemWidth,\n                    transform: `translateX(${currentPosition}px)`,\n                    transition: `${animationDuration}ms`,\n                  }}\n                />\n              </li>\n            );\n          })}\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            className=\"Carousel__button\"\n            disabled={currentPosition === 0 && !infinite}\n            onClick={this.scrollLeft}\n          >\n            Prev\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"Carousel__button\"\n            disabled={currentPosition === maxShift && !infinite}\n            onClick={this.scrollRight}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  onChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    const { id, value } = e.currentTarget;\n\n    switch (id) {\n      case 'step':\n        this.setState({ step: +value });\n        break;\n\n      case 'frameSize':\n        this.setState({ frameSize: +value });\n        break;\n\n      case 'itemWidth':\n        this.setState({ itemWidth: +value });\n        break;\n\n      case 'animationDuration':\n        this.setState({ animationDuration: +value });\n        break;\n\n      case 'infinite':\n        this.setState((state) => ({ infinite: !state.infinite }));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n\n        <form className=\"Carousel__form\">\n          <label\n            htmlFor=\"step\"\n            className=\"Carousel__label\"\n          >\n            Step\n            <input\n              id=\"step\"\n              type=\"number\"\n              className=\"Carousel__input\"\n              value={step}\n              min={1}\n              max={10}\n              onChange={this.onChange}\n            />\n          </label>\n\n          <label\n            htmlFor=\"frameSize\"\n            className=\"Carousel__label\"\n          >\n            Frame Size\n            <input\n              id=\"frameSize\"\n              type=\"number\"\n              className=\"Carousel__input\"\n              value={frameSize}\n              min={1}\n              max={10}\n              onChange={this.onChange}\n            />\n          </label>\n\n          <label\n            htmlFor=\"itemWidth\"\n            className=\"Carousel__label\"\n          >\n            Image Width\n            <input\n              id=\"itemWidth\"\n              type=\"number\"\n              className=\"Carousel__input\"\n              value={itemWidth}\n              min={50}\n              max={300}\n              step={10}\n              onChange={this.onChange}\n            />\n          </label>\n\n          <label\n            htmlFor=\"animationDuration\"\n            className=\"Carousel__label\"\n          >\n            Animation duration\n            <input\n              id=\"animationDuration\"\n              type=\"number\"\n              className=\"Carousel__input\"\n              value={animationDuration}\n              min={300}\n              max={3000}\n              step={100}\n              onChange={this.onChange}\n            />\n          </label>\n\n          <div>\n            <input\n              id=\"infinite\"\n              className=\"infinite\"\n              type=\"checkbox\"\n              checked={infinite}\n              onChange={this.onChange}\n            />\n            <label\n              id=\"label\"\n              className=\"Carousel__label\"\n              htmlFor=\"infinite\"\n            >\n              Infinite\n            </label>\n          </div>\n\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}