{"version":3,"sources":["components/Carousel/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","step","frameSize","itemWidth","animationDuration","infinite","currentPosition","scrollLeft","images","props","stepWidth","maxShift","length","setState","scrollRight","expectedShift","onChange","e","currentTarget","id","value","this","listWidth","className","style","width","map","image","src","alt","replace","transform","transition","type","disabled","onClick","htmlFor","min","max","checked","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.140097ac.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ninterface Props {\n  images: string[];\n}\n\ninterface State {\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  currentPosition: number;\n}\n\nexport class Carousel extends React.Component<Props, State> {\n  state = {\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n    currentPosition: 0,\n  };\n\n  scrollLeft = () => {\n    const { images } = this.props;\n    const {\n      step, frameSize, itemWidth, currentPosition, infinite,\n    } = this.state;\n\n    const stepWidth = itemWidth * step;\n    const maxShift = (images.length - frameSize) * itemWidth * -1;\n    const expectedShift = currentPosition + stepWidth;\n\n    if (expectedShift > 0) {\n      this.setState({ currentPosition: 0 });\n    } else {\n      this.setState((state) => ({\n        currentPosition: state.currentPosition + stepWidth,\n      }));\n    }\n\n    if (infinite) {\n      if (currentPosition === 0) {\n        this.setState({ currentPosition: maxShift });\n      }\n    }\n  };\n\n  scrollRight = () => {\n    const { images } = this.props;\n    const {\n      step, frameSize, itemWidth, currentPosition, infinite,\n    } = this.state;\n\n    const stepWidth = step * itemWidth;\n    const maxShift = (images.length - frameSize) * itemWidth * -1;\n    const expectedShift = currentPosition - stepWidth;\n\n    if (expectedShift < maxShift) {\n      this.setState({ currentPosition: maxShift });\n    } else {\n      this.setState({ currentPosition: expectedShift });\n    }\n\n    if (infinite) {\n      if (currentPosition === maxShift) {\n        this.setState({ currentPosition: 0 });\n      }\n    }\n  };\n\n  onChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    const { id, value } = e.currentTarget;\n\n    switch (id) {\n      case 'step':\n        this.setState({ step: +value });\n        break;\n\n      case 'frameSize':\n        this.setState({ frameSize: +value });\n        break;\n\n      case 'itemWidth':\n        this.setState({ itemWidth: +value });\n        break;\n\n      case 'animationDuration':\n        this.setState({ animationDuration: +value });\n        break;\n\n      case 'infinite':\n        this.setState((state) => ({ infinite: !state.infinite }));\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  render(): React.ReactNode {\n    const { images } = this.props;\n    const {\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n      currentPosition,\n    } = this.state;\n\n    const maxShift = (images.length - frameSize) * itemWidth * -1;\n    const listWidth = frameSize * itemWidth;\n\n    return (\n      <div className=\"Carousel\">\n        <ul className=\"Carousel__list\" style={{ width: listWidth }}>\n          {images.map(image => {\n            return (\n              <li\n                className=\"Carousel__image\"\n                key={image}\n              >\n                <img\n                  src={image}\n                  alt={`${image.replace(/\\D/g, '')}`}\n                  style={{\n                    width: itemWidth,\n                    transform: `translateX(${currentPosition}px)`,\n                    transition: `${animationDuration}ms`,\n                  }}\n                />\n              </li>\n            );\n          })}\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            type=\"button\"\n            className=\"Carousel__button\"\n            disabled={currentPosition === 0 && !infinite}\n            onClick={this.scrollLeft}\n          >\n            Prev\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"Carousel__button\"\n            disabled={currentPosition === maxShift && !infinite}\n            onClick={this.scrollRight}\n          >\n            Next\n          </button>\n        </div>\n\n        <form className=\"Carousel__form\">\n          <label\n            htmlFor=\"step\"\n            className=\"Carousel__label\"\n          >\n            Step\n            <input\n              id=\"step\"\n              type=\"number\"\n              className=\"Carousel__input\"\n              value={step}\n              min={1}\n              max={10}\n              onChange={this.onChange}\n            />\n          </label>\n\n          <label\n            htmlFor=\"frameSize\"\n            className=\"Carousel__label\"\n          >\n            Frame Size\n            <input\n              id=\"frameSize\"\n              type=\"number\"\n              className=\"Carousel__input\"\n              value={frameSize}\n              min={1}\n              max={10}\n              onChange={this.onChange}\n            />\n          </label>\n\n          <label\n            htmlFor=\"itemWidth\"\n            className=\"Carousel__label\"\n          >\n            Image Width\n            <input\n              id=\"itemWidth\"\n              type=\"number\"\n              className=\"Carousel__input\"\n              value={itemWidth}\n              min={50}\n              max={300}\n              step={10}\n              onChange={this.onChange}\n            />\n          </label>\n\n          <label\n            htmlFor=\"animationDuration\"\n            className=\"Carousel__label\"\n          >\n            Animation duration\n            <input\n              id=\"animationDuration\"\n              type=\"number\"\n              className=\"Carousel__input\"\n              value={animationDuration}\n              min={300}\n              max={3000}\n              step={100}\n              onChange={this.onChange}\n            />\n          </label>\n\n          <div>\n            <input\n              id=\"infinite\"\n              className=\"infinite\"\n              type=\"checkbox\"\n              checked={infinite}\n              onChange={this.onChange}\n            />\n            <label\n              id=\"label\"\n              className=\"Carousel__label\"\n              htmlFor=\"infinite\"\n            >\n              Infinite\n            </label>\n          </div>\n\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"App__title\">\n          {`Carousel with ${images.length} images`}\n        </h1>\n        <Carousel images={images} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}